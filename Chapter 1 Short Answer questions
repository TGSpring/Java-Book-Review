Chapter 1 review questions:
1. What is the purpose of the main method in Java program?
  The purpose of the manin method in a java program is to serve as the entry point for execution. The 
JVM starts running the program from the main method. It initializes the program by creating objects,
setting up variables, and calling other methods as needed. Its signature is:
"public static main void(String[] args)"
public: makes the mehtod accessible to the JVM
static: Aloows the mehtod to be called without creating an instance of the class.
void: Indicates the mehtod doesn not return any value.
String[] args: Endables passing command-line arguments to the program.


2. What is the role of the .class file?
  A .class file contains the bytecode of a Java program, which is a platform-independent, itermediate representation of the code.
This file is generated by the Java compiler javac after compiling the .java source file.
  The role of the .class file:
    It allows the JVM to interpret and execute the program.
    It acts as teh runnable version of your program, indpendent of the underlying system, ensuring Java's write once, run anywhere logic.
  The .class file is not specific to a particular operating system or hardware but rather works across all platforms with a compatilbe JVM.

3. What is the difference between a compile-time and a runtime error?
  Compile time error:
    Occurs during the compilation phase, before the program is ran.
    These errors are usually related to violations of the langauge's snytax or rules.
    EXAMPLE: int number = "hello"; //Type mismatch.

  Runtime Error:
    Occurs while the program is executing, after it has successfully compiled.
    These errors are often caused by incorrect logic, invalid input, or unexpected conditions
    EXAMPLE: int result = 10 / 0; //Division by zero causes a runtime error.

In short compile-time errors prevent the program from running, while runtime errors crash during execution.


4. What does it mean for Java to be "Platform-Independent"?
  Java is platfomr indpendent because of its ability to compile code into an intermediate form called bytecode. When you
  write and compile a Java program, the Java compiler javac translates the source code into bytecode, which is stored in a
  .class file. This bytecode is not specific to any operating system or hardware.
  Intstead the JVM on each platform interprets and executes the bytecode. Since JVMs are platform-specific but the bytecode is
  unviseral, Java programs can run on any device with a compatible JVM. This is often summarized by the phrase, "write once,
  run anywhere, WORA".

5. What is the differenc between System.out.print and System.out.println?
  System.out.print prints the output wihout moving to the next line.
  Useful when you want more control over inline formatting or wish to combine multiple print statements on the same line.

  System.out.println Prints the output and automatically moves to the next line after the output.
  Useful for displaying output where each statement should appear on a new line.

6. What is the purpose of comments in a Java program?
  Explain code: comments describe what the program or a specific part of the code does, making it easier for 
  others or yourself to understand.
  Improve Maintainability: When you revisit code after some time, comments serve as a reminder of your thought
  proccess.
  Debugging Aid: Comments can temporarily disable lines of code during debugging by turning them into to comments.
  Documentation: Comments are used to provide detailed explanations, such as mehtod behavior, parameter usage, expected outputs.

7. What is the difference between the Java compiler javac and the JVM?
  javac translates teh source code .java files into bytecode .class files.
  checks for syntax errors during compilation process.
  platform independent the generated bytecode can be executed on any system with a JVM

  JVM executes the bytecode produced by the compiler.
  acts as an interpreter between the bytecode and the specific operating system
  Handles runtime activities like memory management, garbage collection, and exception handling.

  9. What is the difference between Syntax and runtime errors?
     Syntax Errors:
	•	What: Occur when the code violates the grammatical rules of the Java language.
	•	When: Detected at compile time by the compiler.
	•	Examples:
	•	Missing a semicolon:

System.out.println("Hello world")


	•	Misspelled keywords:

Publc static void main(String[] args) { }


	•	Result: The program will not compile until the syntax error is fixed.

Runtime Errors:
	•	What: Occur during the execution of the program, even if it compiles successfully.
	•	When: Detected at runtime by the JVM.
	•	Examples:
	•	Division by zero:

int x = 10 / 0; // Throws ArithmeticException


	•	Accessing a null object:

String str = null;
System.out.println(str.length()); // Throws NullPointerException


	•	Result: The program crashes or produces unintended behavior during execution.

Key Difference:
	•	Syntax errors prevent the program from compiling.
	•	Runtime errors cause issues while the program is running

Question 10:

What are the two primary types of Java programs, and how do they differ?
  1.	Applications:
	•	Standalone programs that run on a user’s computer.
	•	Require a Java Virtual Machine (JVM) to execute.
	•	Examples: Console-based programs or desktop applications.
	•	Example code:

public class MyApp {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}


	2.	Applets (Legacy/Deprecated):
	•	Small programs that were designed to run inside a web browser.
	•	Required a Java-enabled browser or an applet viewer.
	•	Applets are no longer widely used due to modern web technologies and security concerns

Key Difference:
	•	Applications run independently on a machine, whereas applets required a browser or viewer for execution.

Since applets are now largely obsolete, modern Java development focuses mainly on applications