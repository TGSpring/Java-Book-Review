Tyler Spring
6/13/2025
Chapter 9 Short Response questions
As I get farther into this book, the questions are becoming larger/complex. They require more set up/context. 
I will keep progressing, but if anyone is reading this, it will take a noticeable amount of time longer.
I am aiming to pick 2 problems per section, however this will vary based on what is covered/how much context is needed.

Section 9.1 Inheritance Basics.

1. What is code reuse? How does inheritance help achieve code reuse?
    - The book defines this as, "the practice of writing a program code once and using it in many contexts". The best way to think of this is
    Don't Repeat Yourself(DRY). Inheritance helps us achieve code reuse by extending itself to subclasses. In doing so, we do not need to
    create redundant code that is already existing in the "parent" class, the one extending itself. This also helps with code maintenance,
    when a change is made in said parent class, it can propagate to subclasses.

2. What is the difference between overloading and overriding a method?
    - The book defines overriding as, "To implement a new version of a method to replace code that would otherwise
    have been inherited from a superclass". A common example is an Animal class with a speak() method. When you create a 
    Dog subclass, you override speak() so that it prints "bark" instead of what the Animal class would print.
    - Overloading involves creating multiple versions of a method with the same name within the same class, but with different 
    parameter lists. Unlike overriding, overloading does not involve inheritance. Instead of having separate classes with different implementations
    of the method, you have multiple methods that handle various cases directly within a single class.

Section 9.2 Interacting with the superclass

5. Explain the difference between the "this" keyword and the super "keyword". When should each be used?
    - The this keyword refers to the current instance of a class. It's used to access the object's instance variables, methods, or constructors. 
    Useful when there's a naming conflict or for constructor chaining.
    - The super keyword is used to refer to members of the immediate parent class. It's particularly useful when you need to invoke an overridden method or access
    a superclass constructor.
    Use this to work with the current object's members, use super to access or invoke functionality from the parent class.

6. Consider the following class:

    //Represents a university student.
    public class Student {
        private String name;
        private int age;

        public Student(String name, int age) {
            this.name = name;
            this.age = age;
        }

        public void setAge(int age) {
            this.age = age;
        }
    }

    Also consider the following partial implementation of a subclass of Student to represent undergraduate students at a university.
        public class undergraduateStudent extends Student {
            private int year;
            ...
        }

    can the code in the undergraduateStudent class access the name and age fields it inherits from Student? Can it call the setAge method?

        - No, the name and age fields in Student are declared private, so even though they are inherited, it can not access them.
        - Yes, it can call setAge because it is declared public, this applies to any other public or protected methods inherited from student.


Section 9.3 Polymorphism

14. Assume that the following classes have been defined:

    public class Mammal extends SeaCreature {
        public void method1() {
            System.out.println("warm-blooded");
        }
    }

    public class SeaCreature {
        public void method1() {
            System.out.println("creature 1");
        }

        public void method2() {
            System.out.println("creature 2");
        }

        public String toString() {
            return "ocean-dwelling";
        }
    }

    public class Whale extends Mammal {
        public void method1() {
            System.out.println("spout");
        }

        public String toString() {
            return "BIG!";
        }
    }

    public class Squid extends SeaCreature {
        public void method2() {
            System.out.println("tentacles");
        }

        public String toString() {
            return "squid";
        }
    }


    What output is produced by the following code fragment?
        public static void main(String[] args) {
            SeaCreature[] elements = {new Squid(), new Whale(),
            new SeaCreature(), new Mammal()};

            for(int i = 0; i < elements.length; i++) {
                System.out.println(elements[i]);
                elements[i].method1();
                elements[i].method2();
                System.out.println();
            }
        }
    - Squid, creature 1, tentacles, squid
      BIG!, spout, creature 2
      ocean-dwelling, creature 1, creature 2
      ocean-dwelling, warm-blooded, creature 2



15. Using classes from the previous problem, write the output that is produced by the following code fragment:
    
    public static void main(Stringp[] args) {
        SeaCreature[] elements = {new SeaCreature(), new Squid(), new Mammal(), new Whale()};

        for(int i = 0; i < elements.length; i++) {
            elements[i].method2();
            System.out.println(elements[i]);
            elements[i].method1();
            System.out.println();
        }
    }

    -   creature 2, ocean-dwelling, creature 1
        tentacles, squid, creature 1
        creature 2, ocean-dwelling, warm-blooded
        creature 2, BIG!, spout


Section 9.4 Inheritance and Design

18. What is the difference between an is-a and a has-a relationship? How do you create a has-a relationship in your code?
    - An is-a relationship exists where an instance of a subclass is also an instance of its parent class or superclass. 
    If you have a Student class, it would extend to undergraduateStudent, creating an is-a.
    - The book describes has-a as a connection between two objects where one has a field that refers to the other. The 
    contained object acts as part of the containing objects state. You would make a has-a where your class can't or shouldn't
    substitute for the other class. Think of like when people need legal services, most of them will "choose" to have a lawyer handle it,
    rather than to "be" a lawyer themselves. An even simpler example can be a car class "has-a" engine field.

19. Imagine a Rectangle class with objects that represent two-dimensional rectangles. The Rectangle has width and height fields with appropriate accessors
and mutators, as well as getArea and getPerimeter methods. You would like to add a Square class into your system. Is it a good design to make Square a subclass of Rectangle? 
Why or why not?
    - A Square "is-a" Rectangle is problematic because a rectangle is defined by two independent dimensions, while a square only needs one. If you try to make Square a
    subclass of Rectangle, you must override almost every method to ensure that both dimensions remain equal. You'd need to add extra validation to prevent the user 
    from setting width and height independently, which complicates the design and makes the code harder to maintain. In such cases, it is preferable to design a Square 
    class separately, either by using composition or by creating an entirely independent class, rather than forcing it into the Rectangle inheritance hierarchy.


Section 9.5 Interfaces

22. What is the difference between implementing an interface and extending a class?
    - Extending a class means inheriting fields and methods from a single parent class, using "extends". This creates the "is-a" relationship 
    and allows code reuse, but Java only allows single inheritance, one superclass.
    - Implementing an interface means agreeing to provide concrete implementations for all the abstract methods declared in the interface, using implements.
    This allows a class to promise certain behaviors, and a class implement multiple interfaces, overcoming the single inheritance limitation.
    - The differences between extending a class gives you inherited code and state, implementing an interfaces only requires you to provide method bodies, 
    with no inherited state.

24. What's wrong with the code for the following interface? What should be changed to make a valid interface for objects that have colors?
    
    public interface Colored {
        private Color color;
        public Color getColor() {
            return color;
        }
    }

    - You should not have fields like private Color color in an interface. You should not have method bodies, you only need to be declaring method signatures:
        public interface Colored {
            Color getColor();
        }

    This tells any implementing class that it must provide a getColor() method, but the interface itself does not store or define how color is handled.
    SIDENOTE: since i am also learning C++, you can think of this like how C++ has a header file or uses forward declaration. This just tells the compiler what 
    methods/functions exist, not their implementation. Java interface declares method signatures, what methods a class must have, but not their implementation.

Section 9.6 Case Study: Financial Class hierarchy

27. What is an abstract class? How is an abstract class like a normal class, and how does it differ? How is it like an interface?

    - The book defines an abstract class as a java class that cannot be instantiated, but that instead serves as a superclass to 
    hold common code and declare abstract behavior. What is different about this from an interface is that an abstract class can also declare 
    fields and implement methods with bodies. You cannot create instances of an abstract class directly, it can declare abstract methods 
    that must be implemented by subclasses. Both are able to declare abstract methods that subclasses must provide, but an abstract class can have 
    fields and concrete methods, while an interface only declares method signatures.

28. Consider the following abstract class and its subclass. What state and behavior do you know for sure will be present in the subclass? How do you know?

    public abstract class Ordered {
        private String[] data;
        public void getElement(int i) {
            return data[i];
        }
        public abstract void arrange();
    }
    
    public class OrderedByLength extends Ordered {

    }

    - The subclass OrderedByLength is going to have an array of strings called data as part of its state, this is because it inherits 
    this from the abstract superclass Ordered. It will also inherit the getElement(int i) method, which allows you to access elements from that array. 
    However, since arrange() is abstract in the superclass, OrderedByLength must provide its own implementation of this method. The subclass can't directly
    access the private data field, but it can use any public or protected methods from the superclass to interact with it. So, the state data and the getElement
    method are always present, and the subclass is required to define how the data is arranged by implementing arrange();